package drone
public
	with Base_Types;
	with Data_Model;
	
system Drone
	--features
		--current_location: out data port;
		--status_change: out event port;
		--new_target: in event data port;
end Drone;

system Operator
	features
		new_target: out event data port;
		current_location: in data port;
		status_change: in event port;
end Operator;


system implementation Drone.impl
	subcomponents
		the_GPS: device GPS;
		the_weight_sensor: device WeightSensor;
		the_height_sensor: device HeightSensor;
		the_radar: device Radar;
		the_aerial: device Aerial;
		the_drone_rotor: device DroneRotor;
		the_operator: system Operator;
		the_controller: process Controller.with_threads;
		the_bus: bus HWConnection.impl;
		the_ram: memory Ram;
		the_processor: processor MainProcessor.impl;
	connections
		c1: port the_weight_sensor.weight -> the_controller.weight;
		c2: port the_height_sensor.height -> the_controller.height;
		c4: port the_GPS.location_out -> the_controller.location_in;
		c5: port the_aerial.new_target -> the_controller.new_target;
		c6: port the_radar.blockade -> the_controller.blockade_in;
		c3: port the_controller.location_out -> the_aerial.location_out;
		c7: port the_controller.status_change -> the_aerial.status_change;
		c8: port the_operator.new_target -> the_aerial.new_target_copy;
		c9: port the_aerial.current_location -> the_operator.current_location;
		c10: port the_aerial.status_change_copy -> the_operator.status_change;
		c11: port the_controller.rotor_power_out -> the_drone_rotor.rotor_power_in;
		c12: port the_drone_rotor.rotor_power_out -> the_controller.rotor_power_in;
		
		
		c21: bus access the_bus -> the_GPS.bus_access;
		c22: bus access the_bus -> the_weight_sensor.bus_access;
		c23: bus access the_bus -> the_height_sensor.bus_access;
		c24: bus access the_bus -> the_aerial.bus_access;
		c25: bus access the_bus -> the_radar.bus_access;
		c26: bus access the_bus -> the_ram.bus_access;
		c27: bus access the_bus -> the_processor.bus_access;
		c28: bus access the_bus -> the_drone_rotor.bus_access;
end Drone.impl;

process Controller
	features
		weight: in data port Base_Types::Float;
		location_in: in data port;
		height: in data port Base_Types::Float;
		location_out: out data port;
		status_change: out event port;
		blockade_in: in event data port;
		new_target: in event data port;
		rotor_power_out: out data port Base_Types::Float;
		rotor_power_in: in data port Base_Types::Float;
end Controller;

process implementation Controller.with_threads
	subcomponents
		thread_weight: thread ReadWeight.impl;
		thread_height: thread ReadHeight.impl;
		thread_rotor: thread RotorPower.impl;
		thread_radar: thread ScanArea.impl;
		thread_gps: thread GPSData.impl; 
		thread_analyse_data: thread AnalyseData.impl;
	connections
		c1: port weight -> thread_weight.weight_in;
		c2: port height -> thread_height.height_in;
		c3: port location_in -> thread_gps.location_in;
		c4: port blockade_in -> thread_radar.blockade_in;
		c5: port location_in -> thread_gps.location_in;
		c6: port thread_gps.location_out -> location_out;
		c7: port thread_analyse_data.status_change -> status_change;
		c8: port new_target -> thread_analyse_data.new_target;
		
		c10: port thread_weight.weight_out -> thread_analyse_data.weight_in;
		c11: port thread_height.height_out -> thread_analyse_data.height_in;
		c12: port thread_radar.blockade_out -> thread_analyse_data.blockade_in;
		c13: port thread_gps.location_out -> thread_analyse_data.location_in;
		c14: port thread_rotor.rotor_power_out -> thread_analyse_data.rotor_power_in;
		c15: port thread_analyse_data.rotor_power_out -> rotor_power_out;
		c16: port rotor_power_in -> thread_rotor.rotor_power_in;
		
end Controller.with_threads;

-- --------------------
--      Devices      --
-- --------------------

device GPS
	features
		location_out: out data port;
		bus_access: requires bus access HWConnection;
end GPS;
	
device implementation GPS.impl
end GPS.impl;


device WeightSensor	
	features
		weight: out data port Base_Types::Float;
		bus_access: requires bus access HWConnection;
end WeightSensor;
	
device implementation WeightSensor.impl
end WeightSensor.impl;


device HeightSensor	
	features
		height: out data port Base_Types::Float;
		bus_access: requires bus access HWConnection;
end HeightSensor;
	
device implementation HeightSensor.impl
end HeightSensor.impl;


device Radar	
	features
		blockade: out event data port;
		bus_access: requires bus access HWConnection;
end Radar;
	
device implementation Radar.impl
end Radar.impl;

device Aerial
	features
		location_out: in data port;
		current_location: out data port;
		status_change: in event port;
		status_change_copy: out event port;
		new_target: out event data port;
		new_target_copy: in event data port;
		bus_access: requires bus access HWConnection;
end Aerial;
	
device implementation Aerial.impl
end Aerial.impl;

device DroneRotor
  features
    rotor_power_in : in data port Base_Types::Float;
    rotor_power_out: out data port Base_Types::Float;
    bus_access : requires bus access HWConnection;
end DroneRotor;

device implementation DroneRotor.impl
end DroneRotor.impl;

bus HWConnection
end HWConnection;
	
bus implementation HWConnection.impl
end HWConnection.impl;

processor MainProcessor
	features
		bus_access: requires bus access HWConnection.impl;
end MainProcessor;
	
processor implementation MainProcessor.impl
end MainProcessor.impl;

memory Ram
	features
		bus_access: requires bus access HWConnection.impl;
end Ram;

-- --------------------
--      Threads      --
-- --------------------

thread ReadWeight
	features
		weight_in: in data port Base_Types::Float;
		weight_out: out data port Base_Types::Float;
end ReadWeight;

thread implementation ReadWeight.impl
end ReadWeight.impl;

thread ReadHeight
	features
		height_in: in data port Base_Types::Float;
		height_out: out data port Base_Types::Float;
end ReadHeight;

thread implementation ReadHeight.impl
end ReadHeight.impl;

thread RotorPower
	features
		rotor_power_in: in data port Base_Types::Float;
		rotor_power_out: out data port Base_Types::Float;
end RotorPower;

thread implementation RotorPower.impl
end RotorPower.impl;

thread ScanArea
	features
		blockade_in: in event port;
		blockade_out: out event port;
end ScanArea;

thread implementation ScanArea.impl
end ScanArea.impl;

thread GPSData
	features
		location_in: in data port;
		location_out: out data port;
end GPSData;

thread implementation GPSData.impl
end GPSData.impl;

thread AnalyseData
	features
		location_in: in data port;
		blockade_in: in event port;
		height_in: in data port Base_Types::Float;
		weight_in: in data port Base_Types::Float;
		rotor_power_out: out data port Base_Types::Float; 
		rotor_power_in: in data port Base_Types::Float; 
		status_change: out event port;
		new_target: in event data port;
end AnalyseData;

thread implementation AnalyseData.impl
end AnalyseData.impl;

end drone;

