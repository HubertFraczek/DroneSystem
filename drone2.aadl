package drone2
public

with Drone_Common;
with Drone_Types;
-- Drone system

	system drone
	end drone;

-- system implementation is composed by physical devices (Hardware
-- entity): antenna + processor + memory + bus and software entity :
-- running processes and threads + operating system functionalities
-- (scheduling) implemented in the processor that represent a part
-- of execution platform and physical devices in the same time.
	system implementation drone.with_devices
	subcomponents
	  aerial : device drone_common::antenna;
	  drone_rotor : device drone_common::drone_rotor;
	  operator : device drone_common::operator;
	  GPS : device drone_common::GPS;
	  weight_sensor : device drone_common::weight_sensor;
	  height_sensor : device drone_common::height_sensor;
	  radar : device drone_common::radar;
	  cpu : processor drone_common::cpu_leon2;
	  mem_bus : bus drone_common::mem_bus;
	  RAM : memory drone_common::RAM;
	  controller : process Controller.with_threads;
	connections
	  cnx1 : PORT controller.location_out -> aerial.location_in;
	  cnx2 : PORT aerial.new_target -> controller.new_target;
	  cnx3 : PORT controller.send_pulse -> aerial.antenna_in;
	  cnx4 : PORT controller.to_screen -> monitor.screen_in;
	  cnx5 : bus access mem_bus -> aerial.mem_bus;
	  cnx6 : bus access mem_bus -> radar.mem_bus;
	  cnx7 : bus access mem_bus -> drone_rotor.mem_bus;
	  cnx8 : bus access mem_bus -> GPS.mem_bus;
	  cnx9 : bus access mem_bus -> weight_sensor.mem_bus;
	  cnx10 : bus access mem_bus -> height_sensor.mem_bus;
	  
	  cnx11 : bus access mem_bus -> cpu.mem_bus;
	  cnx12 : bus access mem_bus -> RAM.mem_bus;
	properties
		Actual_processor_Binding => (reference(cpu)) applies to controller;
	 	Actual_Memory_Binding => (reference(ram)) applies to controller;
	  	Actual_Connection_Binding => (reference(mem_bus)) applies to cnx1, cnx2, cnx3, cnx4;
	end drone.with_devices;


-- ---------------------
--  Controller process with threads --
-- ---------------------

process controller
features
		weight: in data port Drone_Types::Drone_Flight_Parameter;
		location_in: in data port;
		height: in data port Drone_Types::Drone_Flight_Parameter;
		location_out: out data port;
		status_change: out event port;
		blockade: in event data port;
		new_target: in event data port;
end controller;

process implementation Controller.with_threads
	
end Controller.with_threads;


-- The controller process is responsible for signals processing :
-- Pattern:
--    transmitter -> antenna -> receiver -> analyser -> display

process processing
features
  to_screen : OUT EVENT PORT;
  send_pulse : OUT EVENT PORT;
  receive_pulse : IN DATA PORT Radar_Types::Target_Distance;
  get_angle : IN DATA PORT Radar_Types::Motor_Position;
end processing;

process implementation processing.others
subcomponents
  receive : thread receiver.impl;
  analyse : thread analyser.impl;
  display : thread display_panel.impl;
  transmit : thread transmitter.impl;
  control_angle : thread controller.impl;
connections
  cnx1 : PORT receive_pulse -> receive.receiver_in;
  cnx2 : PORT display.display_out -> to_screen;
  cnx3 : PORT transmit.transmitter_out -> send_pulse;
  cnx4 : PORT get_angle -> control_angle.controller_in;
  cnx5 : PORT receive.receiver_out -> analyse.from_receiver;
  cnx6 : PORT analyse.analyser_out -> display.display_in;
  cnx7 : PORT transmit.transmitter_out -> analyse.from_transmitter;
  cnx8 : PORT control_angle.controller_out -> analyse.from_controller;
end processing.others;

-- --------------------
--  Receiver thread --
-- --------------------
-- 
-- This thread receives radar echos from the antenna.

thread receiver
features
  receiver_in : IN DATA PORT Radar_Types::Target_Distance;
  receiver_out : OUT DATA PORT Radar_Types::Target_Distance;
end receiver;

thread implementation receiver.impl
CALLS default: {
  RS : subprogram Receiver_Spg;
};
connections
  cnx1 : PARAMETER receiver_in -> RS.receiver_in;
  cnx2 : PARAMETER RS.receiver_out -> receiver_out;
properties
  Dispatch_Protocol => Periodic;
  Priority => 13;
  Compute_Execution_Time => 10ms..20ms;
  Period => 1500ms;
end receiver.impl;

subprogram Receiver_Spg
features
  receiver_in : IN PARAMETER Radar_Types::Target_Distance;
  receiver_out : OUT PARAMETER Radar_Types::Target_Distance;
properties
  Source_Language => (Ada95);
  Source_Name => "radar.receiver";
ANNEX Behavior_Specification {**
  STATES
    s : INITIAL FINAL STATE;
  TRANSITIONS
    t : s -[ ]-> s { receiver_out := "echo" };
**};
end Receiver_Spg;

-- ---------------------
--   Analyser thread --
-- ---------------------
-- 
-- This thread compares transmitted and received signals to perform
-- detection, localisation and identification.

thread analyser
features
  from_transmitter : IN DATA PORT radar_types::Radar_Pulse;
  analyser_out : OUT DATA PORT radar_types::Target_Position;
  from_receiver : IN DATA PORT Radar_Types::Target_Distance;
  from_controller : IN DATA PORT Radar_Types::Motor_Position;
end analyser;

thread implementation analyser.impl
CALLS default: {
  AS : subprogram Analyser_Spg;
};
connections
  cnx1 : PARAMETER AS.analyser_out -> analyser_out;
  cnx2 : PARAMETER from_receiver -> AS.from_receiver;
  cnx3 : PARAMETER from_controller -> AS.from_controller;
properties
  Dispatch_Protocol => Periodic;
  Priority => 12;
  Compute_Execution_Time => 40ms..60ms;
  Period => 5000ms;
end analyser.impl;

subprogram Analyser_Spg
features
  analyser_out : OUT PARAMETER radar_types::Target_Position;
  from_receiver : IN PARAMETER Radar_Types::Target_Distance;
  from_controller : IN PARAMETER Radar_Types::Motor_Position;
properties
  Source_Language => (Ada95);
  Source_Name => "radar.analyser";
ANNEX Behavior_Specification {**
  STATES 
    s : INITIAL FINAL STATE;
  TRANSITIONS
    t : s -[ ]-> s { analyser_out := "distance" };
**};
end Analyser_Spg;

-- -------------------------
--   Display_Panel thread --
-- -------------------------
-- 
-- This thread is responsible for formatting and displaying
-- processed signals

thread display_panel
features
  display_out : OUT EVENT PORT;
  display_in : IN DATA PORT radar_types::Target_Position;
end display_panel;

thread implementation display_panel.impl
CALLS default: {
  DS : subprogram Display_Spg;
};
connections
  cnx1 : PARAMETER display_in -> DS.display_in;
properties
  Dispatch_Protocol => Periodic;
  Priority => 10;
  Compute_Execution_Time => 10ms..30ms;
  Period => 2000ms;
end display_panel.impl;

subprogram Display_Spg
features
  display_in : IN PARAMETER radar_types::Target_Position; 
properties
  Source_Language => (Ada95);
  Source_Name => "radar.display_panel";
ANNEX Behavior_Specification {**
  STATES 
    s : INITIAL FINAL STATE;
  TRANSITIONS
    t : s -[ ]-> s { display_out! };
**};
end Display_Spg;

-- ----------------------
--  Transmitter thread --
-- -----------------------

thread transmitter
features
  transmitter_out : OUT DATA PORT radar_types::Radar_Pulse;
end transmitter;

thread implementation transmitter.impl
properties
  Dispatch_Protocol => Periodic;
  Priority => 21;
  Compute_Execution_Time => 10ms..10ms;
  Period => 500ms;
  Compute_Entrypoint_Source_Text => "radar.transmitter";
ANNEX Behavior_Specification {**
  STATES
    s : INITIAL COMPLETE FINAL STATE;
  TRANSITIONS
    t : s -[ON DISPATCH]-> s { transmitter_out := "ping" };
**};
end transmitter.impl;



end drone2;